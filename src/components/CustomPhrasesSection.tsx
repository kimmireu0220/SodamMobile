/**
 * Custom Phrases Section Component (React Native)
 * 
 * Ïó≠Ìï†: ÏÇ¨Ïö©ÏûêÏùò Í∞úÏù∏ ÏÉÅÏö©Íµ¨Î•º Í¥ÄÎ¶¨ÌïòÎäî ÏÑπÏÖò
 * 
 * ÏûÖÎ†•:
 * - ÏóÜÏùå (AsyncStorageÏóêÏÑú ÏßÅÏ†ë Îç∞Ïù¥ÌÑ∞ Î°úÎìú)
 * 
 * Ï∂úÎ†•:
 * - ÏÉÅÏö©Íµ¨ Î™©Î°ù (ÌïÑÌÑ∞ÎßÅ/Ï†ïÎ†¨ Í∞ÄÎä•)
 * - Ï∂îÍ∞Ä/ÏàòÏ†ï/ÏÇ≠Ï†ú Í∏∞Îä•
 * - Ï¶êÍ≤®Ï∞æÍ∏∞ ÌÜ†Í∏Ä
 * 
 * ÏÉÅÌò∏ÏûëÏö©:
 * - Ìà¥Î∞î: Ï∂îÍ∞Ä Î≤ÑÌäº, Ïπ¥ÌÖåÍ≥†Î¶¨ ÌïÑÌÑ∞, Ï¶êÍ≤®Ï∞æÍ∏∞ ÌÜ†Í∏Ä, Ï†ïÎ†¨ ÏòµÏÖò
 * - Î¶¨Ïä§Ìä∏: Í∞Å ÏïÑÏù¥ÌÖúÏùò ÏàòÏ†ï/ÏÇ≠Ï†ú/Ï¶êÍ≤®Ï∞æÍ∏∞
 * - Î™®Îã¨: ÏÉÅÏö©Íµ¨ Ï∂îÍ∞Ä/ÏàòÏ†ï Ìèº
 * 
 * Ï†ëÍ∑ºÏÑ±:
 * - ÌÇ§Î≥¥ÎìúÎ°ú Î™®Îì† Í∏∞Îä• ÏÇ¨Ïö© Í∞ÄÎä•
 * - Ï†ÅÏ†àÌïú accessibility ÏÜçÏÑ± Î∞è ÏÑ§Î™Ö
 * - Ìè¨Ïª§Ïä§ Í¥ÄÎ¶¨ Î∞è Ïä§ÌÅ¨Î¶∞ Î¶¨Îçî ÏßÄÏõê
 */
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  TextInput,
  Alert,
  Modal
} from 'react-native';

interface CustomPhrase {
  id: string;
  text: string;
  isFavorite: boolean;
  usageCount: number;
  createdAt: string;
}

const CustomPhrasesSection: React.FC = () => {
  const [phrases, setPhrases] = useState<CustomPhrase[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [showFavoritesOnly, setShowFavoritesOnly] = useState(false);
  const [showModal, setShowModal] = useState(false);
  const [editingPhrase, setEditingPhrase] = useState<CustomPhrase | null>(null);
  const [newPhrase, setNewPhrase] = useState('');

  useEffect(() => {
    // TODO: AsyncStorageÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    // ÌòÑÏû¨Îäî ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞Î°ú Íµ¨ÌòÑ
    const dummyPhrases: CustomPhrase[] = [
      {
        id: '1',
        text: 'ÏïàÎÖïÌïòÏÑ∏Ïöî',
        isFavorite: true,
        usageCount: 15,
        createdAt: '2024-01-01'
      },
      {
        id: '2',
        text: 'Í∞êÏÇ¨Ìï©ÎãàÎã§',
        isFavorite: true,
        usageCount: 12,
        createdAt: '2024-01-02'
      },
      {
        id: '3',
        text: 'ÌöåÏùòÏã§ÏùÄ Ïñ¥ÎîîÏù∏Í∞ÄÏöî?',
        isFavorite: false,
        usageCount: 8,
        createdAt: '2024-01-03'
      }
    ];

    setTimeout(() => {
      setPhrases(dummyPhrases);
      setIsLoading(false);
    }, 1000);
  }, []);

  const filteredPhrases = phrases.filter(phrase => {
    if (showFavoritesOnly && !phrase.isFavorite) {
      return false;
    }
    return true;
  });

  const sortedPhrases = [...filteredPhrases].sort((a, b) => {
    return b.usageCount - a.usageCount;
  });

  const handleAddPhrase = () => {
    if (!newPhrase.trim()) {
      Alert.alert('Ïò§Î•ò', 'Î¨∏Íµ¨Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    const phrase: CustomPhrase = {
      id: Date.now().toString(),
      text: newPhrase.trim(),
      isFavorite: false,
      usageCount: 0,
      createdAt: new Date().toISOString().split('T')[0]
    };

    setPhrases([...phrases, phrase]);
    setNewPhrase('');
    setShowModal(false);
  };

  const handleEditPhrase = (phrase: CustomPhrase) => {
    setEditingPhrase(phrase);
    setNewPhrase(phrase.text);
    setShowModal(true);
  };

  const handleUpdatePhrase = () => {
    if (!editingPhrase || !newPhrase.trim()) {
      Alert.alert('Ïò§Î•ò', 'Î¨∏Íµ¨Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
      return;
    }

    setPhrases(phrases.map(p => 
      p.id === editingPhrase.id 
        ? { ...p, text: newPhrase.trim() }
        : p
    ));

    setEditingPhrase(null);
    setNewPhrase('');
    setShowModal(false);
  };

  const handleDeletePhrase = (id: string) => {
    Alert.alert(
      'ÏÇ≠Ï†ú ÌôïÏù∏',
      'Ïù¥ ÏÉÅÏö©Íµ¨Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        { 
          text: 'ÏÇ≠Ï†ú', 
          style: 'destructive',
          onPress: () => setPhrases(phrases.filter(p => p.id !== id))
        }
      ]
    );
  };

  const handleToggleFavorite = (id: string) => {
    setPhrases(phrases.map(p => 
      p.id === id ? { ...p, isFavorite: !p.isFavorite } : p
    ));
  };

  if (isLoading) {
    return (
      <View style={styles.loadingContainer}>
        <Text style={styles.loadingText}>ÏÉÅÏö©Íµ¨ Î°úÎî© Ï§ë...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      {/* Ìà¥Î∞î */}
      <View style={styles.toolbar}>
        <TouchableOpacity
          style={styles.addButton}
          onPress={() => setShowModal(true)}
          accessibilityLabel="ÏÉÅÏö©Íµ¨ Ï∂îÍ∞Ä"
          accessibilityRole="button"
        >
          <Text style={styles.addButtonText}>+ Ï∂îÍ∞Ä</Text>
        </TouchableOpacity>


        <TouchableOpacity
          style={[
            styles.favoriteButton,
            showFavoritesOnly && styles.favoriteButtonActive
          ]}
          onPress={() => setShowFavoritesOnly(!showFavoritesOnly)}
        >
          <Text style={styles.favoriteButtonText}>
            {showFavoritesOnly ? '‚≠ê' : '‚òÜ'} Ï¶êÍ≤®Ï∞æÍ∏∞
          </Text>
        </TouchableOpacity>
      </View>

      {/* ÏÉÅÏö©Íµ¨ Î™©Î°ù */}
      <ScrollView style={styles.list}>
        {sortedPhrases.map(phrase => (
          <View key={phrase.id} style={styles.phraseItem}>
            <View style={styles.phraseContent}>
              <Text style={styles.phraseText}>{phrase.text}</Text>
              <View style={styles.phraseMeta}>
                <Text style={styles.phraseUsage}>{phrase.usageCount}Ìöå ÏÇ¨Ïö©</Text>
              </View>
            </View>
            
            <View style={styles.phraseActions}>
              <TouchableOpacity
                onPress={() => handleToggleFavorite(phrase.id)}
                style={styles.actionButton}
              >
                <Text style={styles.actionButtonText}>
                  {phrase.isFavorite ? '‚≠ê' : '‚òÜ'}
                </Text>
              </TouchableOpacity>
              
              <TouchableOpacity
                onPress={() => handleEditPhrase(phrase)}
                style={styles.actionButton}
              >
                <Text style={styles.actionButtonText}>‚úèÔ∏è</Text>
              </TouchableOpacity>
              
              <TouchableOpacity
                onPress={() => handleDeletePhrase(phrase.id)}
                style={styles.actionButton}
              >
                <Text style={styles.actionButtonText}>üóëÔ∏è</Text>
              </TouchableOpacity>
            </View>
          </View>
        ))}
      </ScrollView>

      {/* Ï∂îÍ∞Ä/ÏàòÏ†ï Î™®Îã¨ */}
      <Modal
        visible={showModal}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setShowModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>
              {editingPhrase ? 'ÏÉÅÏö©Íµ¨ ÏàòÏ†ï' : 'ÏÉÅÏö©Íµ¨ Ï∂îÍ∞Ä'}
            </Text>
            
            <TextInput
              style={styles.input}
              value={newPhrase}
              onChangeText={setNewPhrase}
              placeholder="ÏÉÅÏö©Íµ¨Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
              multiline
            />
            
            
            <View style={styles.modalActions}>
              <TouchableOpacity
                style={styles.cancelButton}
                onPress={() => {
                  setShowModal(false);
                  setEditingPhrase(null);
                  setNewPhrase('');
                }}
              >
                <Text style={styles.cancelButtonText}>Ï∑®ÏÜå</Text>
              </TouchableOpacity>
              
              <TouchableOpacity
                style={styles.saveButton}
                onPress={editingPhrase ? handleUpdatePhrase : handleAddPhrase}
              >
                <Text style={styles.saveButtonText}>
                  {editingPhrase ? 'ÏàòÏ†ï' : 'Ï∂îÍ∞Ä'}
                </Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  loadingText: {
    fontSize: 16,
    color: '#666666',
  },
  toolbar: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  addButton: {
    backgroundColor: '#2E7D32',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 8,
    marginRight: 12,
  },
  addButtonText: {
    color: '#ffffff',
    fontWeight: '600',
  },
  favoriteButton: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
    backgroundColor: '#f0f0f0',
  },
  favoriteButtonActive: {
    backgroundColor: '#FFD700',
  },
  favoriteButtonText: {
    color: '#666666',
    fontSize: 14,
  },
  list: {
    flex: 1,
  },
  phraseItem: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  phraseContent: {
    flex: 1,
  },
  phraseText: {
    fontSize: 16,
    color: '#333333',
    marginBottom: 4,
  },
  phraseMeta: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  phraseUsage: {
    fontSize: 12,
    color: '#999999',
  },
  phraseActions: {
    flexDirection: 'row',
  },
  actionButton: {
    padding: 8,
    marginLeft: 4,
  },
  actionButtonText: {
    fontSize: 16,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  modalContent: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 20,
    width: '100%',
    maxWidth: 400,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333333',
    marginBottom: 16,
    textAlign: 'center',
  },
  input: {
    borderWidth: 1,
    borderColor: '#e0e0e0',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    marginBottom: 16,
    minHeight: 80,
    textAlignVertical: 'top',
  },
  modalActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  cancelButton: {
    flex: 1,
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    backgroundColor: '#f0f0f0',
    marginRight: 8,
    alignItems: 'center',
  },
  cancelButtonText: {
    color: '#666666',
    fontWeight: '600',
  },
  saveButton: {
    flex: 1,
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    backgroundColor: '#2E7D32',
    marginLeft: 8,
    alignItems: 'center',
  },
  saveButtonText: {
    color: '#ffffff',
    fontWeight: '600',
  },
});

export default CustomPhrasesSection;
